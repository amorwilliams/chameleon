apply plugin: 'android'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

import groovy.json.JsonSlurper

def loadProductFlavors() {
    try {
        def slurper = new JsonSlurper()
        File f = new File("${projectDir}/productflavor.json")
        def result = slurper.parseText(f.text)
        return result
    } catch(e) {
        print e
        return []
    }
}

def platformFlavors = loadProductFlavors()

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"
                            
    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 18
    }
                                                    
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    flavorGroups "chameleon"
    // generate productFlavors according to the setting of productFlavor.json
    productFlavors {
        platformFlavors.each { x ->
            "$x.productFlavor" {
                x.cfg.each { item, value ->
                    "$item" "$value"
                }
                flavorGroup "chameleon"
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile "$projectDir/../AndroidManifest.xml"
            java.srcDirs = ["$projectDir/../src"]
            resources.srcDirs = ["$projectDir/../src"]
            aidl.srcDirs = ["$projectDir/../src"]
            renderscript.srcDirs = ["$projectDir/../src"]
            res.srcDirs = ["$projectDir/../res"]
            assets.srcDirs = ["$projectDir/../assets"]
            jniLibs.srcDirs = ["$projectDir/../libs"]
        }

    }
    // for old cocos2dx, put the platform source under 'platform_src'
    platformFlavors.each {x ->
        sourceSets["${x.productFlavor}"].setRoot("src/${x.productFlavor}")
    }
}

dependencies {
    compile fileTree(dir: "$projectDir/../libs", include: "*.jar")
    compile fileTree(dir: "$projectDir/../libs/armeabi", include: "*/so")
    compile project("cocos2dx_prj")
    compile files("libs/chameleon_sdk.jar")

    platformFlavors.each {x ->
        "${x.productFlavor}Compile" fileTree(dir: "${projectDir}/src/${x.productFlavor}/libs", includes: ['*.jar'])
    }
}

task ndkBuildDebug(type: Exec) {
    print 'building ndk with debug'
    commandLine '../build_native.sh', 'NDK_DEBUG=1', 'NDK_APPLICATION_MK=jni/Application.mk', '-j4'
}

task ndkBuildRelease(type: Exec) {
    commandLine '../build_native.sh', 'NDK_APPLICATION_MK=jni/Application.mk', '-j4'
}

task(ndkBuildClean, type: Exec) {
    commandLine '../build_native.sh', 'clean'
}

android.applicationVariants.all { variant ->
    if (variant.buildType.debuggable){
        variant.processManifest.dependsOn(ndkBuildDebug)
    } else {
        variant.processManifest.dependsOn(ndkBuildRelease)
    }
}

clean.dependsOn(ndkBuildClean)

